name: CDK Build & Deploy

on: push

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
    steps:
      - id: get-user
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"

  build:
    runs-on: ubuntu-latest
    container: node:16
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   container: node:16
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: cache independences
  #       id: cache-dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: set up JDK
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: "11"

  #     - name: Run tests
  #       run: npm run test

  deploy:
    if: github.ref == 'refs/heads/feature/github-actions'
    # for  test
    needs: build
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/vscode/devcontainers/base:ubuntu
      options: --user ${{ needs.configure.outputs.uid_gid }}
    env:
      CRM_ENV: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: cache independences
      #   id: cache-dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      # - name: Clean output directory
      #   run: rm -rf $GITHUB_WORKSPACE
      #   shell: bash

      # - name: TypeScript Build
      #   run: npx tsc

      - name: build
        run: npm run build
        shell: bash

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Install AWS CLI
        run: |
          apt-get update
          apt-get install -y awscli

      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk

      - name: Bootstrap AWS CDK
        run: cdk bootstrap --profile prod

      - name: CDK Synth
        run: cdk synth

      - name: Deploy stack
        run: cdk deploy --require-approval never
